
if [[ $(/usr/bin/id -u) -eq 0 ]] && [ -d /root ] && [ -n "$(find /root -user "root" -print -prune -o -prune 2>/dev/null)" ]; then
	export HOME=/root
elif [[ $(/usr/bin/id -u) -eq 0 ]] && [ -d /var/root ] && [ -n "$(find /var/root -user "root" -print -prune -o -prune 2>/dev/null)" ]; then
	export HOME=/var/root
fi

if [[ -z "$WORKHOME" ]]; then
	WORKHOME="$HOME"
	export WORKHOME
fi

XDG_CONFIG_HOME="$WORKHOME/.config"
export XDG_CONFIG_HOME

_check_path_ownership() {
	[ -d "$1" ] && [ -n "$(find "$1" -user "$2" -print -prune -o -prune 2>/dev/null)" ]
}

ORIG_PATH=$PATH
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R7/bin:/usr/X11R6/bin
PATH=/usr/local/bin:/usr/local/sbin:${PATH}
# snap packages
if _check_path_ownership /snap/bin root ; then
	PATH=/snap/bin:${PATH}
fi
# pkgin on osx, probably
if _check_path_ownership /opt/pkg/bin root ; then
	PATH=/opt/pkg/bin:/opt/pkg/sbin:${PATH}
fi
# standard pkgsrc
if _check_path_ownership /usr/pkg/bin root ; then
	PATH=/usr/pkg/bin:/usr/pkg/sbin:${PATH}
fi
# user-specific pkgsrc
if _check_path_ownership "$WORKHOME/pkg/bin" "$(id -u)" ; then
	PATH=$WORKHOME/pkg/bin:$WORKHOME/pkg/sbin:${PATH}
fi
# user-specific homebrew
if _check_path_ownership "/opt/homebrew/bin" "$(id -u)" ; then
	PATH=/opt/homebrew/bin:/opt/homebrew/sbin:${PATH}
fi
if uname | grep -E ^MINGW > /dev/null ; then
	PATH=${PATH}:$ORIG_PATH
fi
PATH=$WORKHOME/bin:$HOME/bin:${PATH}
export PATH
#export MANPATH

# also add these two lines to /root/.profile (for e.g. 'sudo -i crontab -e')
VIMINIT="$WORKHOME/.vimrc"
export VIMINIT
export EDITOR=vim
alias vi=vim

alias ls='ls -F'

export PAGER=less
alias less='less -R -X'
alias ag="ag --path-to-ignore '$WORKHOME/.agignore' --pager 'less -R -X'"
alias fd='fd -c never'
alias pylint="pylint --rcfile '$WORKHOME/.pylintrc'"

vimpipe() {
	xargs -o vim
}
agvim() {
	ag -l0 "$@" | xargs -0o vim
}
fdvim() {
	fd -0 "$@" | xargs -0o vim
}

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias cdp=". $WORKHOME/bin/cdp"

# http://www.shellperson.net/using-sudo-with-an-alias/   (fixes "sudo vi <whatever>" not using vim)
alias sudo='sudo '

alias findpid="ps axww -o pid,user,%cpu,%mem,start,time,command | selecta | sed 's/^ *//' | cut -f1 -d' '"

alias notify='tput bel'

alias rbash='arch -x86_64 /bin/bash --login'

command -v grunt > /dev/null && alias grunt="grunt --stack"

export HISTCONTROL=erasedups
export HISTSIZE=10000
export HISTIGNORE="clear:bg:fg:cd:cd -:exit:date:w:pwd"
# Append to the history file when exiting instead of overwriting it
shopt -s histappend
# type something then hit up/down to search history that matches what you already have
if tty -s; then
	bind '"\e[A": history-search-backward'
	bind '"\e[B": history-search-forward'
fi

if command -v starship >/dev/null ; then
	eval "$(starship init bash)"
elif [ -f "$WORKHOME/.prompt_spec" ]; then
	. "$WORKHOME/.prompt_spec"
elif [[ $(/usr/bin/id -u) -eq 0 ]]; then
	# red
	export PS1="\[\e[0;31m\][\u@\h \W]$ \[\e[m\]"
else
	# green
	export PS1="\[\e[0;32m\][\u@\h \W]$ \[\e[m\]"
fi

GIT_CONFIG_GLOBAL="$WORKHOME/.gitconfig"
export GIT_CONFIG_GLOBAL
if [ -f "$WORKHOME/.git-completion.bash" ]; then
	. "$WORKHOME/.git-completion.bash"
fi

# mosh sets this to en_US.UTF-8, which makes perl angry, so do this on mosh servers, if necessary
#unset LANG

export PERL_CPANM_OPT="-v -S"

if ( command -v tty >/dev/null ) && ( tty -s ) && [ -x /usr/games/fortune ]; then
	/usr/games/fortune
fi

export SLIDESDIR="$WORKHOME/src/reveal.js/slides"
if [ -d "$SLIDESDIR" ]; then
	_slidesComplete() {
		local files=("$SLIDESDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _slidesComplete slides
fi

# see https://github.com/rupa/z
ZPATH=$WORKHOME/src/z/z.sh
if [ -e $ZPATH ]; then
	. $ZPATH
fi

alias gitjk="history 10 | tail -r | gitjk_cmd"

export BASH_SILENCE_DEPRECATION_WARNING=1

if command -v direnv >/dev/null ; then
	eval "$(direnv hook bash)"
fi

export FIGNORE=DS_Store

export NOTEDIR="$WORKHOME/iCloud/Scratch"
if [ -d "$NOTEDIR" ]; then
	_noteComplete() {
		local files=("$NOTEDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _noteComplete note
fi

export PERSONDIR="$NOTEDIR/person"
if [ -d "$PERSONDIR" ]; then
	_personComplete() {
		local files=("$PERSONDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _personComplete person
fi

export MEETDIR="$NOTEDIR/meeting"
if [ -d "$MEETDIR" ]; then
	_meetComplete() {
		local files=("$MEETDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _meetComplete meet
fi

_dropboxComplete() {
	DROPBOXDIR="/Volumes/DropBoxes"
	if [ ! -d "$DROPBOXDIR" ]; then
		dropbox
	fi
	local files=("$DROPBOXDIR/$2"*)
	[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
}
complete -o bashdefault -o default -o filenames -F _dropboxComplete dropbox


