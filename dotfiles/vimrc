" ensure autocmd's don't get defined twice
autocmd!

" reload changes automatically when saved
autocmd! bufwritepost .vimrc source ~/.vimrc

set nocompatible

set runtimepath+=~/.vim

if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	"setglobal bomb
	set fileencodings=ucs-bom,utf-8,latin1
endif

" pathogen (https://github.com/tpope/vim-pathogen)
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
Helptags

"general ui
set showmatch
set ruler
set showmode
"show e.g. number of lines selected
set showcmd
set title
" turn off beeps
set vb
" margin while scrolling
set scrolloff=3
set showtabline=1

" Persistent undo
let undodir = expand('~/.vim/undo')
if !isdirectory(undodir)
	call mkdir(undodir)
endif
set undodir=~/.vim/undo
set undofile " Create FILE.un~ files for persistent undo

" search settings
set incsearch
set ignorecase
set smartcase
set hlsearch
"clear search highlighting by hitting enter
nnoremap <cr> :noh<CR><CR>:<backspace>

if has('mouse')
	set mouse=a
	" use with <alt> or <fn> on OSX; set cursor position; scroll
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
	\ if line("'\"") > 1 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

set background=dark
" syntax highlight and indentation settings
syntax on
set autoindent
filetype plugin indent on
" 'cindent' has terrible behavior in .txt files after ()
set smartindent
" make the backspace key work with autoindent
set backspace=indent,eol,start
" indent/unindent selected lines in visual mode
vmap <tab> >gv
vmap <s-tab> <gv
" if wrap is turned on, we want these setttings
set linebreak
set nolist
" prevent hard-wrapping
set textwidth=0 wrapmargin=0
" turn off all code folding
autocmd BufRead,BufNewFile * set nofoldenable

" start using buffers the way they were meant to be used
set hidden

" hybrid relative and absolute number for current line;
" if v:version <= 703, we only get 'relativenumber'
"set number
"set relativenumber
highlight LineNr cterm=NONE ctermfg=Grey ctermbg=NONE
highlight CursorLineNr cterm=NONE ctermfg=Yellow ctermbg=NONE

" type identification help
autocmd BufRead,BufNewFile *.t setfiletype perl
" make this explicit so the markdown plugin doesn't take it
autocmd BufRead,BufNewFile *.mdwn setfiletype ikiwiki
autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd BufRead,BufNewFile *.json setfiletype javascript syntax=javascript

" defaults
autocmd BufRead,BufNewFile * setlocal tabstop=4 shiftwidth=4 softtabstop=4

" type-specific settings
autocmd BufRead,BufNewFile *.txt setlocal nowrap
autocmd FileType javascript setlocal expandtab
" markdown
autocmd FileType mkd setlocal expandtab
autocmd FileType markdown setlocal expandtab
autocmd FileType ikiwiki setlocal expandtab
autocmd BufEnter *.md exe 'noremap <leader>m :! /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome %:p<CR>' 

" highlight text past 100 columns, for these types
"autocmd BufWinEnter *.t let w:m2=matchadd('Search', '\%>100v.\+', -1)
"autocmd BufWinEnter *.p? let w:m2=matchadd('Search', '\%>100v.\+', -1)
"autocmd BufWinEnter *.sh let w:m2=matchadd('Search', '\%>100v.\+', -1)
if (exists('+colorcolumn'))
	set colorcolumn=80
	highlight ColorColumn ctermbg=233
endif

autocmd BufNewFile,BufRead ~/src/fretless/* set nowrap tabstop=2 shiftwidth=2 expandtab

" sudo write
ca w!! w !sudo tee >/dev/null "%"

" make vim's clipboard use the system clipboard by default (needs testing on non-OSX)
set clipboard=unnamed

" shortcuts for paste mode in normal and insert modes
" DON'T REMEMBER WHAT THIS DOES, AND IT CAUSES A ONE-SECOND DELAY AFTER
" HITTING :
"nnoremap  :set invpaste paste?<CR>
"set pastetoggle=

let mapleader = ","

" shortcut to switch background setting
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR> )

" shortcuts to comment/uncomment lines
map <Leader># :s/^/#<CR><CR>
map <Leader>## :s/^#<CR><CR>

" shortcuts to bullet/unbullet (markdown) lines
map <Leader>* :s/^\s*/* <CR><CR>
map <Leader>** :s/^* <CR><CR>

" shortcut to wrap text
map <Leader>w !fmt<CR>

" configure yankstack
let g:yankstack_map_keys = 0
nmap π <Plug>yankstack_substitute_older_paste
nmap ∏ <Plug>yankstack_substitute_newer_paste

" configure vim-gitgutter
highlight clear SignColumn
set updatetime=250

"configure airline
set noshowmode
let g:airline_powerline_fonts = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0

" configure Supertab
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabMidWordCompletion = "0"

" configure minibufexplorer
map <Leader>b :MBEFocus<cr>

" auto-complete when in command-mode
set wildmenu

" configure ag to search from project root
let g:ag_working_path_mode="r"

" make the tmux status line show the currently-edited file
if &term == "screen" || &term == "screen-256color"
	set t_ts=
endif
"if &term == "screen" || &term == "screen-256color" || &term == "xterm" || &term == "xterm-color" || &term == "xterm-256color"
	set title
"endif
autocmd BufEnter * let &titlestring = "vim " . expand("%:h") . "/" . expand("%:t")

